---
- name: 🧹 Ensure clean /tmp/k8s directory on app node
  file:
    path: /tmp/k8s
    state: absent
  become: true

- name: 📁 Recreate /tmp/k8s with correct ownership for current SSH user
  file:
    path: /tmp/k8s
    state: directory
    mode: "0755"
    owner: "{{ ansible_user | default('ubuntu') }}"
    group: "{{ ansible_user | default('ubuntu') }}"
  become: true

- name: 🗃️ Tar up manifests on control machine (localhost)
  command: >
    tar -czf {{ playbook_dir }}/k8s_manifests.tar.gz -C {{ playbook_dir }}/../k8s/staging .
  delegate_to: localhost
  become: false

- name: 📁 Ensure /tmp/k8s exists on app node
  file:
    path: /tmp/k8s
    state: directory
    mode: "0755"
  become: true

- name: 🚚 Copy manifest archive to app node
  copy:
    src: /tmp/k8s_manifests.tar.gz
    dest: /tmp/k8s/k8s_manifests.tar.gz
    mode: "0644"
    remote_src: false # local file on control node
  become: false

- name: 📦 Extract manifests on app node
  unarchive:
    src: "/tmp/k8s/k8s_manifests.tar.gz"
    dest: "/tmp/k8s/"
    remote_src: true
  become: true

- name: 📛 Ensure qrgenix namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: qrgenix
    state: present

- name: 🚫 Delete old ConfigMap if exists
  kubernetes.core.k8s:
    state: absent
    kind: ConfigMap
    namespace: qrgenix
    name: qrgenix-nginx-config

- name: 📤 Copy final nginx.conf from local path for ConfigMap
  copy:
    src: /opt/nginx/nginx.conf
    dest: /tmp/k8s/nginx.conf
    remote_src: true
  become: true

- name: ⚙️ Generate Nginx ConfigMap from nginx.conf
  shell: |
    kubectl create configmap qrgenix-nginx-config \
      --namespace=qrgenix \
      --from-file=nginx.conf=/tmp/k8s/nginx.conf \
      --dry-run=client -o yaml > /tmp/k8s/nginx-configmap.yaml
  args:
    chdir: /tmp/k8s
  become: true

- name: 📥 Apply ConfigMap
  kubernetes.core.k8s:
    state: present
    src: /tmp/k8s/nginx-configmap.yaml

- name: 🔍 Show final ConfigMap contents
  command: kubectl get configmap qrgenix-nginx-config -n qrgenix -o yaml
  register: configmap_output
  changed_when: false

- name: 🖨️ Output ConfigMap content
  debug:
    var: configmap_output.stdout_lines

- name: 🚫 Delete all managed K8s resources (excluding namespace)
  shell: |
    for file in /tmp/k8s/*.yaml; do
      if grep -q 'kind: Namespace' "$file"; then
        echo "Skipping namespace file: $(basename "$file")"
        continue
      fi
      echo "Deleting $(basename "$file")"
      kubectl delete -f "$file" --ignore-not-found
    done
  args:
    executable: /bin/bash
  become: true

- name: ⏳ Wait briefly to avoid race conditions
  pause:
    seconds: 5

- name: ⏳ Wait for service deletion to complete
  command: kubectl get svc qrgenix-frontend -n qrgenix
  register: svc_status
  retries: 5
  delay: 3
  until: svc_status.rc != 0
  failed_when: false

- name: 📄 Apply all manifests in /tmp/k8s
  shell: |
    for file in /tmp/k8s/*.yaml; do
      echo "Applying $file"
      kubectl apply -f "$file"
    done
  args:
    executable: /bin/bash
  become: true

- name: 🧼 Clean up extracted files and archive
  file:
    path: /tmp/k8s/
    state: absent
  become: true
